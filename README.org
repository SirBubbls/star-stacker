#+TITLE:Star Stacker
#+AUTHOR: Lucas Sas
#+EMAIL: lucassas@live.de
#+DATE: December 25, 2021
#+STARTUP: inlineimages nofold
#+SETUPFILE: https://fniessen.github.io/org-html-themes/setup/theme-readtheorg.setup
#+EXPORT_FILE_NAME: docs/index.html

* Description
This crate is an exposure stacking implementation for /astrophotography/.
[[https://sirbubbls.github.io/star-stacking][Here]] you can find a blog post explaining what this repository is about exactly.

This package primarily relies on ~opencv~ to read/write and process images.

** Maintainers
+ @SirBubbls

* Installation
#+begin_quote
By default no /non-free/ algorithms are used.
You can choose to enable those with the feature ~opencvx~ (~cargo build --features="opencvx"~).
#+end_quote

- Install Rust as you normally would (via ~rustup~)
- ~opencv~ will be installed with cargo

* Usage
You can just compile and run this program with:

#+begin_src bash
cargo run -- -i "GLOB_IMAGES" -o "output.png"
#+end_src

** Examples
The repository comes with 3 example datasets you can try out right away.
Because they are rather big (around 1 GB) you need to pull them manually with ~git lfs fetch --all~ assuming you already have Git LFS installed.
To run the examples you can just run:

#+begin_src bash
cargo run -- --input="./datasets/horizontal/*.png" -o "example-horizontal.png" --precision 3
#+end_src

#+begin_src bash
cargo run -- --input="./datasets/vertical_full_size/*.png" -o "example-vertical-fs.png" --precision 3.5
#+end_src

Because of the small image size in the last example we need to adjust the ~threshold~ for star detection and the ~precision~ for mapping.
#+begin_src bash
cargo run -- --input="./datasets/vertical_small_size/*.png" -o "example-vertical-ss.png" --precision 15 --threshold 4
#+end_src

* Results
[[./docs/images/side-by-side-bright.jpg]]

[[./docs/images/side-by-side-close.jpg]]

